generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                     String                   @id @default(cuid())
    name                   String?
    email                  String?                  @unique
    emailVerified          DateTime?
    image                  String?
    password               String?
    managerOf              Team[]                   @relation("managerOf")
    checklists             Checklist[]
    submissions            Submission[]
    assignments            Assignment[]
    feedbacks              feedback[]
    MemberOf               MemberOf[]
    accounts               Account[]
    Department             Department?              @relation(fields: [departmentId], references: [id])
    departmentId           Int?
    OrganizationMembership OrganizationMembership[]
}

model Organization {
    id          Int                      @id @default(autoincrement())
    name        String                   @unique
    urlSegment  String                   @unique
    createdAt   DateTime                 @default(now())
    updatedAt   DateTime                 @updatedAt
    departments Department[]
    teams       Team[]
    checklists  Checklist[]
    assignments Assignment[]
    submissions Submission[]
    feedbacks   feedback[]
    memberships OrganizationMembership[]
    invitations Invitation[]
}

model OrganizationMembership {
    userId         String
    organizationId Int
    role           Role         @default(USER)
    user           User         @relation(fields: [userId], references: [id])
    organization   Organization @relation(fields: [organizationId], references: [id])

    @@id([userId, organizationId])
}

enum Role {
    USER
    MANAGER
    ADMIN
}

model Invitation {
    id             Int              @id @default(autoincrement())
    email          String // Email to which the invitation is sent
    organizationId Int
    organization   Organization     @relation(fields: [organizationId], references: [id])
    status         InvitationStatus @default(PENDING)
    invitedAt      DateTime         @default(now())
    respondedAt    DateTime? // Date when the user responded to the invitation
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model Team {
    id             Int           @id @default(autoincrement())
    name           String        @unique
    managerId      String
    manager        User          @relation("managerOf", fields: [managerId], references: [id], onDelete: Cascade)
    assignments    Assignment[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    MemberOf       MemberOf[]
    Checklist      Checklist[]
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId Int?
}

model MemberOf {
    userId String
    teamId Int
    member User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@id([userId, teamId])
}

model Checklist {
    id             Int           @id @default(autoincrement())
    name           String
    managerId      String
    manager        User          @relation(fields: [managerId], references: [id], onDelete: Cascade)
    teamId         Int?
    team           Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
    questions      Question[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    assignments    Assignment[]
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId Int?
}

model Question {
    id          Int       @id @default(autoincrement())
    content     String
    checklistId Int
    questionOf  Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
    options     Option[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Option {
    id           Int               @id @default(autoincrement())
    content      String
    questionId   Int
    optionOf     Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @updatedAt
    submittedFor SubmittedOption[]
}

model Assignment {
    id                 Int           @id @default(autoincrement())
    employeeId         String
    employee           User          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    checklistId        Int
    checklist          Checklist     @relation(fields: [checklistId], references: [id], onDelete: Cascade)
    archivedByEmployee Boolean       @default(false)
    viewedByEmployee   Boolean       @default(false)
    dueDate            DateTime
    submission         Submission?
    feedback           feedback?
    Team               Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId             Int?
    createdAt          DateTime      @default(now())
    Organization       Organization? @relation(fields: [organizationId], references: [id])
    organizationId     Int?
}

model Submission {
    id                Int               @id @default(autoincrement())
    userId            String
    user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    archivedByManager Boolean           @default(false)
    status            Status            @default(PENDING)
    assignmentId      Int               @unique
    assignment        Assignment        @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
    createdAt         DateTime          @default(now())
    SubmittedOptions  SubmittedOption[]
    Organization      Organization?     @relation(fields: [organizationId], references: [id])
    organizationId    Int?
}

model SubmittedOption {
    id           Int        @id @default(autoincrement())
    submissionId Int
    submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
    optionId     Int
    option       Option     @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

enum Status {
    PENDING
    OPENED
    REVIEWED
}

model feedback {
    id             Int           @id @default(autoincrement())
    assignmentId   Int           @unique
    assignment     Assignment    @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
    content        String
    managerId      String
    manager        User          @relation(fields: [managerId], references: [id], onDelete: Cascade)
    createdAt      DateTime      @default(now())
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId Int?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Department {
    id             Int           @id @default(autoincrement())
    name           String        @unique
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    users          User[]
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId Int?
}
