generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int          @id @default(autoincrement())
    fullName    String
    email       String       @unique
    password    String
    department  String?
    role        Role         @default(USER)
    managerOf   Team[]       @relation("managerOf")
    teams       Team[]       @relation("memberOf")
    checklists  Checklist[]
    submissions Submission[]
    assignments Assignment[]
    feedbacks   feedback[]
}

enum Role {
    USER
    MANAGER
    ADMIN
}

model Team {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    managerId   Int
    manager     User         @relation("managerOf", fields: [managerId], references: [id])
    members     User[]       @relation("memberOf")
    assignments Assignment[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Checklist {
    id          Int          @id @default(autoincrement())
    name        String
    managerId   Int
    manager     User         @relation(fields: [managerId], references: [id])
    questions   Question[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    assignments Assignment[]
}

model Question {
    id          Int       @id @default(autoincrement())
    content     String
    checklistId Int
    questionOf  Checklist @relation(fields: [checklistId], references: [id])
    options     Option[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Option {
    id          Int          @id @default(autoincrement())
    content     String
    questionId  Int
    optionOf    Question     @relation(fields: [questionId], references: [id])
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    submissions Submission[]
}

model Assignment {
    id                 Int         @id @default(autoincrement())
    employeeId         Int
    employee           User        @relation(fields: [employeeId], references: [id])
    checklistId        Int
    checklist          Checklist   @relation(fields: [checklistId], references: [id])
    archivedByEmployee Boolean     @default(false)
    dueDate            DateTime
    submission         Submission?
    feedback           feedback?
    Team               Team?       @relation(fields: [teamId], references: [id])
    teamId             Int?
    createdAt          DateTime    @default(now())
}

model Submission {
    id                Int        @id @default(autoincrement())
    userId            Int
    user              User       @relation(fields: [userId], references: [id])
    archivedByManager Boolean    @default(false)
    status            Status     @default(PENDING)
    assignmentId      Int        @unique
    assignment        Assignment @relation(fields: [assignmentId], references: [id])
    options           Option[]
    createdAt         DateTime   @default(now())
}

enum Status {
    PENDING
    OPENED
    REVIEWED
}

model feedback {
    id           Int        @id @default(autoincrement())
    assignmentId Int        @unique
    assignment   Assignment @relation(fields: [assignmentId], references: [id])
    content      String
    managerId    Int
    manager      User       @relation(fields: [managerId], references: [id])
    createdAt    DateTime   @default(now())
}
